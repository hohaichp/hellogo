// Code generated by gowsdl DO NOT EDIT.

package myservice

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type CompositeType struct {
	BoolValue bool `xml:"BoolValue,omitempty" json:"BoolValue,omitempty"`

	StringValue *string `xml:"StringValue,omitempty" json:"StringValue,omitempty"`
}

type GetData struct {
	XMLName xml.Name `xml:"http://tempuri.org/ GetData"`

	Value int32 `xml:"value,omitempty" json:"value,omitempty"`
}

type GetDataResponse struct {
	XMLName xml.Name `xml:"http://tempuri.org/ GetDataResponse"`

	GetDataResult *string `xml:"GetDataResult,omitempty" json:"GetDataResult,omitempty"`
}

type GetDataUsingDataContract struct {
	XMLName xml.Name `xml:"http://tempuri.org/ GetDataUsingDataContract"`

	Composite *CompositeType `xml:"composite,omitempty" json:"composite,omitempty"`
}

type GetDataUsingDataContractResponse struct {
	XMLName xml.Name `xml:"http://tempuri.org/ GetDataUsingDataContractResponse"`

	GetDataUsingDataContractResult *CompositeType `xml:"GetDataUsingDataContractResult,omitempty" json:"GetDataUsingDataContractResult,omitempty"`
}

type SayHello struct {
	XMLName xml.Name `xml:"http://tempuri.org/ SayHello"`

	Param *string `xml:"param,omitempty" json:"param,omitempty"`
}

type SayHelloResponse struct {
	XMLName xml.Name `xml:"http://tempuri.org/ SayHelloResponse"`

	SayHelloResult *string `xml:"SayHelloResult,omitempty" json:"SayHelloResult,omitempty"`
}

type Char int32

type Duration Duration

type Guid string

type Base64Binary []byte

type Boolean bool

type byte int8

type DateTime soap.XSDDateTime

func (xdt DateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return soap.XSDDateTime(xdt).MarshalXML(e, start)
}

func (xdt *DateTime) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	return (*soap.XSDDateTime)(xdt).UnmarshalXML(d, start)
}

type Decimal float64

type Double float64

type Float float32

type int int32

type Long int64

type Short int16

type UnsignedByte byte

type UnsignedInt uint32

type UnsignedLong uint64

type UnsignedShort uint16

type IWCFService interface {
	GetData(request *GetData) (*GetDataResponse, error)

	GetDataContext(ctx context.Context, request *GetData) (*GetDataResponse, error)

	GetDataUsingDataContract(request *GetDataUsingDataContract) (*GetDataUsingDataContractResponse, error)

	GetDataUsingDataContractContext(ctx context.Context, request *GetDataUsingDataContract) (*GetDataUsingDataContractResponse, error)

	SayHello(request *SayHello) (*SayHelloResponse, error)

	SayHelloContext(ctx context.Context, request *SayHello) (*SayHelloResponse, error)
}

type iWCFService struct {
	client *soap.Client
}

func NewIWCFService(client *soap.Client) IWCFService {
	return &iWCFService{
		client: client,
	}
}

func (service *iWCFService) GetDataContext(ctx context.Context, request *GetData) (*GetDataResponse, error) {
	response := new(GetDataResponse)
	err := service.client.CallContext(ctx, "http://tempuri.org/IWCFService/GetData", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iWCFService) GetData(request *GetData) (*GetDataResponse, error) {
	return service.GetDataContext(
		context.Background(),
		request,
	)
}

func (service *iWCFService) GetDataUsingDataContractContext(ctx context.Context, request *GetDataUsingDataContract) (*GetDataUsingDataContractResponse, error) {
	response := new(GetDataUsingDataContractResponse)
	err := service.client.CallContext(ctx, "http://tempuri.org/IWCFService/GetDataUsingDataContract", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iWCFService) GetDataUsingDataContract(request *GetDataUsingDataContract) (*GetDataUsingDataContractResponse, error) {
	return service.GetDataUsingDataContractContext(
		context.Background(),
		request,
	)
}

func (service *iWCFService) SayHelloContext(ctx context.Context, request *SayHello) (*SayHelloResponse, error) {
	response := new(SayHelloResponse)
	err := service.client.CallContext(ctx, "http://tempuri.org/IWCFService/SayHello", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iWCFService) SayHello(request *SayHello) (*SayHelloResponse, error) {
	return service.SayHelloContext(
		context.Background(),
		request,
	)
}
